function [t,h,l] = instantiateevents(p, mu, sigma, tms, hei, tri, T)
% [t,h,l] = INSTANTIATEEVENTS(p, mu, sigma, tms, hei, tri) finds
% instantiations for the spike events described by the vectors p, mu,
% sigma (from FINDPEAKS) using the spikes with times tms and height
% hei, obtained from trials tri. The output will be KxT where
% K=length(p) and T=max(tri). Output t receives time of spike, h 
% receives height of spike, and l receives the likelihood that
% the spike was indeed generated by that event.
% Optional extra argument T fixes the size of the output array.
%
% This function was written for the analysis of the Sept/Oct '01
% Phoenix experiments. See notes dd 10/8/01 in red notebook.

% Measure the size of the data: T=trials, K=events, N=total spikes
        if nargin<7
	  T=max(tri);
	end
	K=length(p);
	N=length(tms);
	
% Initialize output arrays
	t=zeros(K,T);
	h=zeros(K,T);
	l=zeros(K,T);

% For each spike, compute the relative likelihood
% p/sqrt(2*pi*sigma^2)*exp(-(1/2) (t-mu)^2/sigma^2) of it belonging
% to each event. This is a pretty tall matrix. Provisionally assign 
% each spike to the most likely event. 
	likelies=zeros(N,K);
	for k=1:K
	  likelies(:,k) = p(k)/(sqrt(2*pi)*sigma(k)) * exp(-.5*(tms(:)-mu(k)).^2/sigma(k)^2);
	end
	[dummy provisional]=max(likelies,[],2);
	provisional(find(dummy==0))=0;

% Now we need to enforce the one-spike-per-event-per-trial rule. I'd
% love to do this more efficiently, but I can't think of a way that
% doesn't loop over trials and events
	for i=1:T
	  idx=find(tri==i);
	  if ~isempty(idx)
	    for k=1:K
	      now=find(provisional(idx)==k);
	      if ~isempty(now)
% If we have at least one potential instantion of this event in this trial:
                [l(k,i) best]=max(likelies(idx(now),k));
	        t(k,i) = tms(idx(now(best)));
	        h(k,i) = hei(idx(now(best)));
% (Possible alternative: pick largest hei rather than largest likelihood?)
              end
	    end
	  end
	end
	
% Could this be vectorized? Matlab doesn't deal very naturally with
% ragged arrays...

